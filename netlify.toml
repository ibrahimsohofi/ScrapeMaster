# Dynamic build (required for API routes and scraping functionality)
[build]
  command = "bun install && bun run db:generate && SKIP_ENV_VALIDATION=true ESLINT_NO_DEV_ERRORS=true NODE_ENV=production NEXT_SKIP_TRAILING_SLASH_REDIRECT=true bun run build:production"
  publish = ".next"

# Static build alternative (not compatible with API routes)
# [build]
#   command = "bun install && bun run db:generate && SKIP_ENV_VALIDATION=true ESLINT_NO_DEV_ERRORS=true bun run build:static"
#   publish = "out"

  # Build timeout and resources
  [build.processing]
    timeout = "20m"

  [build.environment]
    NODE_VERSION = "18"
    NODE_ENV = "production"
    SKIP_ENV_VALIDATION = "true"
    ESLINT_NO_DEV_ERRORS = "true"
    DATABASE_URL = "file:./prisma/dev.db"
    JWT_SECRET = "your-super-secret-jwt-key-change-this-in-production-32-chars-minimum"
    REFRESH_SECRET = "your-super-secret-refresh-key-change-this-in-production-32-chars-minimum"
    DISABLE_BACKUP_SYSTEM = "true"
    DISABLE_SSL_MANAGER = "true"
    DISABLE_ENTERPRISE_FEATURES = "true"
    NEXT_PRIVATE_SKIP_STATIC_GENERATION = "true"

[functions]
  # Configure serverless functions
  directory = ".netlify/functions"
  node_bundler = "esbuild"

  # API routes timeout
  [functions.api]
    timeout = 30

# Security headers
[[headers]]
  for = "/*"
  [headers.values]
    # Security headers
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "camera=(), microphone=(), location=(), payment=()"

    # Content Security Policy
    Content-Security-Policy = '''
      default-src 'self';
      script-src 'self' 'unsafe-eval' 'unsafe-inline' https://va.vercel-scripts.com https://vitals.vercel-analytics.com;
      style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
      font-src 'self' https://fonts.gstatic.com;
      img-src 'self' data: https: blob:;
      connect-src 'self' https://vitals.vercel-analytics.com https://api.openai.com;
      frame-ancestors 'none';
      base-uri 'self';
      form-action 'self';
    '''

    # HSTS
    Strict-Transport-Security = "max-age=63072000; includeSubDomains; preload"

# API routes headers
[[headers]]
  for = "/api/*"
  [headers.values]
    # API-specific headers
    Cache-Control = "no-store, no-cache, must-revalidate, private"
    X-Robots-Tag = "noindex, nofollow"

    # CORS headers (will be overridden by middleware for specific routes)
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With"
    Access-Control-Max-Age = "86400"

# Static assets caching
[[headers]]
  for = "/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/_next/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# Image optimization
[images]
  remote_images = [
    "https://source.unsplash.com/.*",
    "https://images.unsplash.com/.*",
    "https://ext.same-assets.com/.*",
    "https://ugc.same-assets.com/.*"
  ]

# Redirects and rewrites
[[redirects]]
  from = "/dashboard/*"
  to = "/dashboard/:splat"
  status = 200
  force = false

[[redirects]]
  from = "/api/v1/*"
  to = "/api/:splat"
  status = 301

# Error pages
[[redirects]]
  from = "/*"
  to = "/404"
  status = 404

# Prerendered routes for better performance
[[plugins]]
  package = "@netlify/plugin-nextjs"

# Environment-specific configurations
[context.production]
  [context.production.environment]
    NODE_ENV = "production"
    NEXT_TELEMETRY_DISABLED = "1"

[context.deploy-preview]
  [context.deploy-preview.environment]
    NODE_ENV = "staging"
    NEXT_TELEMETRY_DISABLED = "1"

[context.branch-deploy]
  [context.branch-deploy.environment]
    NODE_ENV = "development"

# Form handling (if needed)
[forms]
  settings = { }

# Large Media (for large files)
[lfs]
  enabled = false

# Split testing (A/B testing)
[split-testing]
  enabled = false
