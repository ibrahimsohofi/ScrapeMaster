apiVersion: apps/v1
kind: Deployment
metadata:
  name: datavault-pro-blue
  namespace: datavault-pro
  labels:
    app: datavault-pro
    version: blue
    deployment-type: blue-green
spec:
  replicas: 3
  selector:
    matchLabels:
      app: datavault-pro
      version: blue
  template:
    metadata:
      labels:
        app: datavault-pro
        version: blue
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      containers:
      - name: datavault-pro
        image: datavault-pro:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: datavault-pro-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: datavault-pro-secrets
              key: jwt-secret
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: datavault-pro-secrets
              key: redis-url
        - name: DATADOG_API_KEY
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: datadog-api-key
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: newrelic-license-key
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - name: temp-vol
          mountPath: /tmp
        - name: cache-vol
          mountPath: /app/.next/cache
      volumes:
      - name: temp-vol
        emptyDir: {}
      - name: cache-vol
        emptyDir: {}
      imagePullSecrets:
      - name: registry-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datavault-pro-green
  namespace: datavault-pro
  labels:
    app: datavault-pro
    version: green
    deployment-type: blue-green
spec:
  replicas: 0  # Initially scaled to 0
  selector:
    matchLabels:
      app: datavault-pro
      version: green
  template:
    metadata:
      labels:
        app: datavault-pro
        version: green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      containers:
      - name: datavault-pro
        image: datavault-pro:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: datavault-pro-secrets
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: datavault-pro-secrets
              key: jwt-secret
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: datavault-pro-secrets
              key: redis-url
        - name: DATADOG_API_KEY
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: datadog-api-key
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: newrelic-license-key
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - name: temp-vol
          mountPath: /tmp
        - name: cache-vol
          mountPath: /app/.next/cache
      volumes:
      - name: temp-vol
        emptyDir: {}
      - name: cache-vol
        emptyDir: {}
      imagePullSecrets:
      - name: registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: datavault-pro-blue
  namespace: datavault-pro
  labels:
    app: datavault-pro
    version: blue
spec:
  selector:
    app: datavault-pro
    version: blue
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: datavault-pro-green
  namespace: datavault-pro
  labels:
    app: datavault-pro
    version: green
spec:
  selector:
    app: datavault-pro
    version: green
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: datavault-pro-active
  namespace: datavault-pro
  labels:
    app: datavault-pro
    service-type: active
spec:
  selector:
    app: datavault-pro
    version: blue  # Initially points to blue
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: datavault-pro-ingress
  namespace: datavault-pro
  labels:
    app: datavault-pro
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  tls:
  - hosts:
    - datavault.pro
    - api.datavault.pro
    secretName: datavault-pro-tls
  rules:
  - host: datavault.pro
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: datavault-pro-active
            port:
              number: 80
  - host: api.datavault.pro
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: datavault-pro-active
            port:
              number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: datavault-pro-pdb
  namespace: datavault-pro
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: datavault-pro
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: datavault-pro-hpa
  namespace: datavault-pro
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: datavault-pro-blue
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
